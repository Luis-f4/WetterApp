ich habe eienen fehler bei:        LicensingRepo.save(l);



hier die funktion meiner controller klasse:







    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path = "/addLicensing/{licenseID}/{employeeID}")
    public @ResponseBody String addLicensing(@PathVariable int licenseID, @PathVariable int employeeID) {



        EmployeeEntity employee = employeeRepo.findById(employeeID).orElse(null);
        LicenseEntity license = licenseRepo.findById(licenseID).orElse(null);
        
        if (employee == null && license == null){
            return  "license and employee not found";
        } else if (employee == null) {
            return  "employee not found";
        }else if (license == null) {
            return  "license not found";
        }





        Licensing l = new Licensing();
        l.setLicense(license);
        l.setEmployee(employee);





        LicensingRepo.save(l);
        return "Saved";
    }









hier sind die restlichen klassen:





package com.spring_swlzfw;



import jakarta.persistence.*;



@Entity
public class Licensing {



    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;



    // Viele Lizenzen können einem Mitarbeiter zugeordnet sein
    @ManyToOne
    @JoinColumn(name = "employee_id")
    private EmployeeEntity employee;



    // Viele Mitarbeiter können einer Lizenz zugeordnet sein
    @ManyToOne
    @JoinColumn(name = "license_id")
    private LicenseEntity license;



    // Getter und Setter
    public int getId() {
        return id;
    }



    public void setId(int id) {
        this.id = id;
    }



    public EmployeeEntity getEmployee() {
        return employee;
    }



    public void setEmployee(EmployeeEntity employee) {
        this.employee = employee;
    }



    public LicenseEntity getLicense() {
        return license;
    }



    public void setLicense(LicenseEntity license) {
        this.license = license;
    }
}




package com.spring_swlzfw;



import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;



import java.util.List;



public interface LicensingRepo extends CrudRepository<Licensing, Integer> {



    // Abfrage aller Verknüpfungen zwischen Mitarbeitern und Lizenzen
    @Query(value = "SELECT lic.id, e.email, l.subscription_pack " +
            "FROM licensing lic " +
            "JOIN employee_entity e ON lic.employee_id = e.id " +
            "JOIN license_entity l ON lic.license_id = l.id", nativeQuery = true)
    public List<Object> getAllLicensingEntries();



    // Abfrage, um alle Lizenzen für einen bestimmten Mitarbeiter zu finden
    @Query(value = "SELECT l.id, l.subscription_pack, l.expiration_date " +
            "FROM licensing lic " +
            "JOIN license_entity l ON lic.license_id = l.id " +
            "WHERE lic.employee_id = :employeeId", nativeQuery = true)
    public List<Object> findLicensesByEmployee(@Param("employeeId") int employeeId);



    // Abfrage, um alle Mitarbeiter zu finden, die eine bestimmte Lizenz verwenden
    @Query(value = "SELECT e.id, e.email, e.department " +
            "FROM licensing lic " +
            "JOIN employee_entity e ON lic.employee_id = e.id " +
            "WHERE lic.license_id = :licenseId", nativeQuery = true)
    public List<Object> findEmployeesByLicense(@Param("licenseId") int licenseId);
}









package com.spring_swlzfw;



import jakarta.persistence.*;
import java.util.List;



@Entity
public class EmployeeEntity {



    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;



    private String email;
    private String department;
    private String company;



    // n:m Beziehung zu LicenseEntity mit Licensing als Join-Tabelle
    @OneToMany(mappedBy = "employee")
    private List<Licensing> licenses;



    // Getter und Setter
    public int getId() {
        return id;
    }



    public void setId(int id) {
        this.id = id;
    }



    public String getEmail() {
        return email;
    }



    public void setEmail(String email) {
        this.email = email;
    }



    public String getDepartment() {
        return department;
    }



    public void setDepartment(String department) {
        this.department = department;
    }



    public String getCompany() {
        return company;
    }



    public void setCompany(String company) {
        this.company = company;
    }



    public List<Licensing> getLicenses() {
        return licenses;
    }



    public void setLicenses(List<Licensing> licenses) {
        this.licenses = licenses;
    }
}









package com.spring_swlzfw;



import jakarta.persistence.*;



import java.time.LocalDate;
import java.util.List;



@Entity
public class LicenseEntity {



    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;



    private String subscriptionPack;
    private LocalDate expirationDate;
    private int purchaseOrder;
    private int purchaseOrderOriginally;
    private int amount;
    private LocalDate startDate;



    // n:m Beziehung zu EmployeeEntity mit Licensing als Join-Tabelle
    @OneToMany(mappedBy = "license")
    private List<Licensing> employees;



    // Getter und Setter
    public int getId() {
        return id;
    }



    public void setId(int id) {
        this.id = id;
    }



    public String getSubscriptionPack() {
        return subscriptionPack;
    }



    public void setSubscriptionPack(String subscriptionPack) {
        this.subscriptionPack = subscriptionPack;
    }



    public LocalDate getExpirationDate() {
        return expirationDate;
    }



    public void setExpirationDate(LocalDate expirationDate) {
        this.expirationDate = expirationDate;
    }



    public int getPurchaseOrder() {
        return purchaseOrder;
    }



    public void setPurchaseOrder(int purchaseOrder) {
        this.purchaseOrder = purchaseOrder;
    }



    public int getPurchaseOrderOriginally() {
        return purchaseOrderOriginally;
    }



    public void setPurchaseOrderOriginally(int purchaseOrderOriginally) {
        this.purchaseOrderOriginally = purchaseOrderOriginally;
    }



    public int getAmount() {
        return amount;
    }



    public void setAmount(int amount) {
        this.amount = amount;
    }



    public LocalDate getStartDate() {
        return startDate;
    }



    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }



    public List<Licensing> getEmployees() {
        return employees;
    }



    public void setEmployees(List<Licensing> employees) {
        this.employees = employees;
    }
}








